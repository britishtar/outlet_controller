#!/usr/bin/python
""" 
    This is a modification of fauxmo_minimal.py on toddmedena's repo. See original notes below.
"""
"""
    fauxmo_minimal.py - Fabricate.IO

    This is a demo python file showing what can be done with the debounce_handler.
    The handler prints True when you say "Alexa, device on" and False when you say
    "Alexa, device off".

    If you have two or more Echos, it only handles the one that hears you more clearly.
    You can have an Echo per room and not worry about your handlers triggering for
    those other rooms.

    The IP of the triggering Echo is also passed into the act() function, so you can
    do different things based on which Echo triggered the handler.
"""

import fauxmo
import logging
import time
import subprocess

from debounce_handler import debounce_handler

logging.basicConfig(level=logging.DEBUG)

class device_handler(debounce_handler):
    """Publishes the on/off state requested,
       and the IP address of the Echo making the request.
    """
    TRIGGERS = {"lamps": 52000, "reading lamp": 52001, "bicycle lamp": 52003, "corner lamp": 52004}

    def act(self, client_address, state, name):
        print "State", state, "on ", name, "from client @", client_address

        # actions to take if "lamps" device is called
        if name == "lamps":
            # if "lamps" is turned ON
	    if state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054003','-l','181','-p','0']) # ON signal for outlet #1
                subprocess.call(['/var/www/rfoutlet/codesend','1054147','-l','181','-p','0']) # ON signal for outlet #2
                subprocess.call(['/var/www/rfoutlet/codesend','1054467','-l','181','-p','0']) # ON signal for outlet #3
                # if "lampls" is turned OFF
	    if not state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054012','-l','181','-p','0']) # OFF signal for outlet #1
                subprocess.call(['/var/www/rfoutlet/codesend','1054156','-l','181','-p','0']) # OFF signal for outlet #2
                subprocess.call(['/var/www/rfoutlet/codesend','1054476','-l','181','-p','0']) # OFF signal for outlet #3

        # what to do if "reading lamp" is called
        if name == "reading lamp":
            # ON
            if state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054003','-l','181','-p','0'])
            # OFF
            if not state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054012','-l','181','-p','0'])

        # what to do if "bicycle lamp" is called
        if name == "bicycle lamp":
            # ON
            if state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054147','-l','181','-p','0'])
            # OFF
            if not state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054156','-l','181','-p','0'])

        # what to do if "corner lamp" is called
        if name == "corner lamp":
            # ON
            if state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054467','-l','181','-p','0'])
            # OFF
            if not state:
                subprocess.call(['/var/www/rfoutlet/codesend','1054476','-l','181','-p','0']) 

        return True

#TODO: create method "send_rf_to_outlet" that is more robust (error catching, etc...)
#    def send_rf_to_outlet(self, outlet_number, desired_state)

if __name__ == "__main__":
    # Startup the fauxmo server
    fauxmo.DEBUG = True
    p = fauxmo.poller()
    u = fauxmo.upnp_broadcast_responder()
    u.init_socket()
    p.add(u)

    # Register the device callback as a fauxmo handler
    d = device_handler()
    for trig, port in d.TRIGGERS.items():
        fauxmo.fauxmo(trig, u, p, None, port, d)

    # Loop and poll for incoming Echo requests
    logging.debug("Entering fauxmo polling loop")
    while True:
        try:
            # Allow time for a ctrl-c to stop the process
            p.poll(100)
            time.sleep(0.1)
        except Exception, e:
            logging.critical("Critical exception: " + str(e))
            break
